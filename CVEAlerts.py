import time
from datetime import date
import datetime
import nvdlib
import requests
import smtplib
import ssl
from email.message import EmailMessage
import re

# Setup for email
port = 465  # For SSL
smtp_server = "smtp.gmail.com"
sender_email = "INSERT SENDER EMAIL HERE"
# List of recipient email addresses
receiver_emails = ["INSERT EMAIL 1 HERE", "INSERT EMAIL 2 HERE"]
password = "INSERT PASSWORD HERE"

# Convert truple to string - Credit to GeeksforGeeks (https://www.geeksforgeeks.org/python-program-to-convert-a-tuple-to-a-string/)


def convertTuple(tup):
    return ''.join([str(x) for x in tup])


# Identifiy time
today = date.today()
todayString = str(today)
startDate = todayString + " 00:00"
endDate = todayString + " 23:59"

# Search NVD for all CVEs posted in date range
r = nvdlib.searchCVE(pubStartDate=startDate, pubEndDate=endDate)

# Open a file to save CVEs in
df = open('DailyCVEs.txt', 'w')

# Sort through JSON data stored in r, write to file, and then close the file
for CVE in r:
    cvesToWrite = (CVE.id, CVE.score, "\n")
    cvesToWriteConvert = convertTuple(cvesToWrite)
    df.write(cvesToWriteConvert)
df.close()

# Open the file that was just written, which contains CVE ID, Score version, score, and severity
fileName = "DailyCVEs.txt"
file = open(fileName, 'r')

# Take lines from the file, format them with regex, and print to a new file.
critical_cves_output = "--- Critical CVEs ---\n"
critical_cves_exist = False

for lines in file:
    match = re.search(r"(.*)\[('.*'|None), ([\d.]+|None), ('.*'|None)]", lines)
    if match:
        cveID = match.group(1)
        cvssVersion = match.group(2)
        cveScore = match.group(3)
        cveSeverity = match.group(4)
        if cveScore != 'None' and float(cveScore) > 8.9:
            critical_cves_output += f"{cveID} - {cveScore}\n"
            critical_cves_exist = True

if not critical_cves_exist:
    critical_cves_output += "No Critical CVEs posted today.\n"

df = open('DailyCVEsFormatted.txt', 'w')
file.seek(0)  # Reset the file pointer to the start of the file

all_cves_output = "--- All CVEs ---\n"
# print all CVEs
for lines in file:
    match = re.search(r"(.*)\[('.*'|None), ([\d.]+|None), ('.*'|None)]", lines)
    if match:
        cveID = match.group(1)
        cvssVersion = match.group(2)
        cveScore = match.group(3)
        cveSeverity = match.group(4)
        all_cves_output += f"{cveID} - {cveScore}\n"

# Send the data held in the output strings via email
msg = EmailMessage()
msg.set_content(critical_cves_output + all_cves_output)
msg['Subject'] = "[Daily Notification] CVEs added to NVD"
msg['From'] = sender_email
# Convert the list to a comma-separated
msg['To'] = ", ".join(receiver_emails)

context = ssl.create_default_context()
# send email
with smtplib.SMTP_SSL(smtp_server, port, context=context) as server:
    server.login(sender_email, password)
    server.send_message(msg, from_addr=sender_email, to_addrs=receiver_emails)
