import csv
import time
from datetime import date, timedelta
import nvdlib
import smtplib
import ssl
from email.message import EmailMessage
import re
from epss_api import EPSS
from urllib.error import HTTPError
import six

client = EPSS()

# Setup for email
port = 465  # For SSL
smtp_server = "smtp.gmail.com"
sender_email = "Sender email address"  # Configure a new email and enable MFA
# List of recipient email addresses
receiver_emails = ["Email address 1", "Email address 2"]
# In new email, search 'app passwords' after MFA enabled to retreive
password = "16 character app password"


def fetch_data():
    # Identify time
    today = date.today()
    todayString = str(today)
    yesterday = today - timedelta(days=1)
    yesterdayString = str(yesterday)

    # Time range. For 24hr search, specify the start time yesterday and the time today that you plan to run it.
    # If you run this in the cloud on a schduled basis at 10am, you would set these both to 10 to capture
    # everything from 10am yesterday up until that moment it runs (10am the next day)
    startDate = yesterdayString + " 00:00"
    endDate = todayString + " 00:00"

    # Search NVD for all CVEs posted in date range
    while True:
        try:
            r = nvdlib.searchCVE(pubStartDate=startDate, pubEndDate=endDate,
                                 key='NVD API Key (if you have one, else remove)', delay=10)  # If you do not have an API you will need to remove key and delay
            break
        # Error handling for common NVD timeout errors
        except (HTTPError, six.SixException) as err:
            if isinstance(err, HTTPError) and err.response.status_code == 503:
                print("503 Error: Service Unavailable. Retrying after 10 seconds...")
            elif isinstance(err, six.SixException):
                print("An unknown error occurred. Retrying after 10 seconds...")
            else:
                raise
            time.sleep(10)

    return r


def process_data(CVE):
    cve_id = CVE.id
    cve_score = getattr(CVE, 'v31score', None)
    # Manually built out URL to avoid parsing issues
    cve_url = f"https://cve.mitre.org/cgi-bin/cvename.cgi?name={cve_id}"
    cve_description = ''
    # Request EPSS score for the current CVE
    epss_result = client.epss(cve_id=cve_id)
    epss_score = epss_result if isinstance(
        epss_result, float) else "Not currently available"

    if hasattr(CVE, 'descriptions') and CVE.descriptions:
        cve_description = CVE.descriptions[0].value

    # 1st iteration of regex to try and pull at least some vulnerable versions
    # If not possible then I added the "please see description" to allow for a more uniform CSV appearance
    vulnerable_versions = re.search(
        r'(in versions up to, and including, [\d.]*)', cve_description)
    if vulnerable_versions:
        vulnerable_versions = vulnerable_versions.group(1)
    else:
        vulnerable_versions = "Please see description"

    return (cve_id, cve_score, f"{epss_score}%", cve_url, cve_description, vulnerable_versions)


while True:
    try:
        r = fetch_data()

        # Prepare the data for CSV
        critical_cves = []
        all_cves = []

        if r:
            for CVE in r:
                processed_data = process_data(CVE)
                cve_score = processed_data[1]
                if cve_score is not None and cve_score > 8.4:
                    critical_cves.append(processed_data)
                all_cves.append(processed_data)

        # Save CVEs to a CSV file by multiple rows
        csv_filename = 'DailyCVEs.csv'
        with open(csv_filename, 'w', newline='') as file:
            writer = csv.writer(file)
            writer.writerow(['Critical CVE ID', 'Score', 'EPSS Score', 'URL',
                            'Description', 'Vulnerable Versions'])
            writer.writerows(critical_cves)
            writer.writerow([])
            writer.writerow(['All CVE ID', 'Score', 'EPSS Score', 'URL',
                            'Description', 'Vulnerable Versions'])
            writer.writerows(all_cves)

        print(f"Output saved to {csv_filename}")

        # Send the data held in the output strings via email
        msg = EmailMessage()
        msg['Subject'] = "CVEs added to NVD for set time range"
        msg['From'] = sender_email
        msg['To'] = ", ".join(receiver_emails)
        msg.set_content(
            "Please find the attached CSV file containing the daily CVEs.")

        with open(csv_filename, 'rb') as file:
            msg.add_attachment(file.read(), maintype='application',
                               subtype='octet-stream', filename=csv_filename)

        context = ssl.create_default_context()

        with smtplib.SMTP_SSL(smtp_server, port, context=context) as server:
            server.login(sender_email, password)
            server.send_message(msg)
        break
    except Exception as e:
        print(f"An error occurred: {e}")
        print("Retrying after 10 seconds...")
        time.sleep(10)
